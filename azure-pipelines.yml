
name: mcgPipeline
# Database settings parameters:
# variables:
#   AzureSubscription: '<Azure service connection>'
#   ServerName: '<Database server name>'
#   DatabaseName: '<Database name>'
#   AdminUser: '<SQL user name>'
#   AdminPassword: '<SQL user password>'
#   SQLFile: '<Location of SQL file in $(Build.SourcesDirectory)>'
trigger:
  batch: true
  branches:
    include:
      - master
      - develop
      - features/test_trigger
    exclude:
      - features/TODO
  paths:
    exclude:
      - README.md
pr:
  branches:
    include:
      - master
      - develop
# schedules:
#   - cron: "0 0 * * *"
#     displayName: Daily midnight build
#     branches:
#       include:
#         - master
#         - releases/*
#       exclude:
#         - develop
#   - cron: "0 12 * * 0"
#     displayName: Weekly Sunday build
#     branches:
#       include:
#         - master
#     always: true
resources:
 containers:
   - container: linux
     image: ubuntu:16.04
     

stages:
  - stage: Stage_1
    displayName: Initialize
    condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: job_1
        displayName: Initialize job 1
        cancelTimeoutInMinutes: 10
        continueOnError: true
        dependsOn: []
        workspace:
          clean: outputs
        steps:
          - script: echo Job 1
          # RUN sql scripts
          # - task: CmdLine@1
          #   displayName: Run Sqlcmd
          #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          #   inputs: 
          #     filename: Sqlcmd
          #     arguments: '-S $(ServerName) -U $(AdminUser) -P $(AdminPassword) -d $(DatabaseName) -i $(SQLFile)'
      - job: job_2
        # reference resources
        container: linux 
        steps:
          - script: echo Job 2
  - stage: Stage_2
    displayName: After configuration
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  - stage: Stage_3
    displayName: Use template stage
    dependsOn: Stage_2
    condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  - template: stages/templateTest.yml
    parameters:
      name: Mini
  - stage: Deploy
    jobs:
    - deployment: DeployWeb
      displayName: deploy Web App
      pool:
        vmImage: 'Ubuntu-latest'
      workspace:
        clean: all
      timeoutInMinutes: 2
      cancelTimeoutInMinutes: 2
      # creates an environment if it doesn't exist
      environment: 'Develop'
      strategy:
        runOnce:
          deploy:
            steps:
            - script: echo Hello world